<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <meta content="width=device-width, initial-scale=1.0">
        <link rel="stylesheet"
        href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.5.1/styles/night-owl.min.css">
        

        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css " rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
        <link rel="stylesheet" href="styles.css">
    </head>
    <body>
        <%- include("partials/nav") -%>
        <div class="container-md">
            <h1 id="hsOverskrift">Om Passport</h1>
            <br>
            <p> Passport er et cookie basert autentiseringsrammeverk for node.js. Med Passport kan du lage og registrere brukere 
                og administrere dem og deres rettigheter
            </p>
            <p> Med passport følger mange metoder som kan brukes med javascript</p>
        <div class="row gx-5">
            <div class="col">
                <pre><code class="language-js">
Passport

$ npm install passport
var passport = require('passport');
                 </code></pre> 
              </div>
              <div class="col">
                <pre><code class="language-js">
Passport-local

$ npm install passport-local
var LocalStrategy = require('passport-local');
                </code></pre>
                
              </div>
            </div>
            <br>
            <div class="row gx-5">
                <div class="col">
                  
<pre><code class="language-js">
passport.authenticate("local", {
    successRedirect: "/hovedside",
    failureRedirect: "/login",
    failureMessage: true
    })
);
//Eksempel på hvordan jeg redirecter
//til riktig side basert på resultet av innloggingen

                        </code> </pre> 
                       
                      
                
                  </div>
                  <div class="col">
                      <pre><code class="language-js">

passport.serializeUser(User.serializeUser());
//Funksjon for å føre inn bruker data i en session

passport.deserializeUser(User.deserializeUser());
//Funksjon for å hente data fra brukeren i en session

                </code> </pre>
                  </div>
                </div>
                <h1>
                    Passport-local </h1>
                    <p> Passport-local er stragtegi innenfor passport som lagrer iden til brukeren på en session</p>
                    <p> Under er et eksempel på bruk av denne strategien i min kode</p>
                    <div class="row gx-5">
                    <div class="col">
                        <pre><code class="language-js">
const authenticateUser = async (email, password, done) => {
    const user = await User.findOne({email})
        if (user == null) {
             return done(null, false);
            }
            try {
             console.log(password, user)
                    if (await bcrypt.compare(password, user.password)) {
                        return done(null, user);
            } else {
                         return done(null, false);
            }
        } catch (e) {
                  return done(e);
             }
    };

                  </code> </pre>
                    </div>
                    <div class="col">
                    <pre><code class="language-js">                 
userSchema.plugin(passportLocalMongoose, {usernameField:"email"})     

passport.use(User.createStrategy());

                    </code>
                </div>
            </div>
            <h1>Hvorfor passport</h1>
            <br>
            <p>Fordelen med Passport er dens intuitive og enkle metoder.
                 Mye av arbeidet er gjort på forhånd og det er fleksibelt med node/express sammen med andre applikasjoner og kode</p>
                 <p>Passport er bra for små prosjekter som krever autentisering, som denne oppgaven<br>
                    Også siden Passport er gratis og veldig fleksibelt      
                 </p>
                <p> Passport er en middelware for node og derfor ikke en service. Fordi du styrer og setter opp serveren selv imotsetning til en service som firebase som er forhåndsbestemt</p>
                 <p class="underoverskrift">Hvorfor ikke passport</p>
                 <p> Passport er lagd for å autentisere via cookies og ikke for å sikre brukere, med andre funksjoner som bcrypt og mongoDB
                     kan man gjøre det trygt <br>
                     Men om man f eks lagrer autentisering i en array kan du lett støtte på problemer utenfor det å kunne bli hacket lett også
                 </p>
        </div>
        <br>
        <div class="container-md">
            <h1 id="hsOverskrift">Bcrypt og salting/hashing</h1>
            <br>
                <p>Bcrypt er en metode for salting og hashing av password. Med bcrypt kan man sikre passordene sine
                    istedet for et standard passord med ord og bokstaver <br>
                    Bcrypt generer en tilfedlig rekke nummere som et kryptert passord og bruker det til å sammenligne når du logger deg på.
                 </p> 
                 <p>Bcrypt er en bra måte å sikre passord selvom databasen din skulle bli hacket</p>
               
                   
                 <p class="underoverskrift">Eksempel på bcrypt brukt i koden min</p>
                <pre><code class="language-js">

    if (await bcrypt.compare(password, user.password)) {
        return done(null, user);
 
}; </code> </pre>
            
            </div>
            
        </div>
        
            <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.5.1/highlight.min.js"></script>
            <script> hljs.initHighlightingOnLoad();</script>
           
    </body>
   
</html>